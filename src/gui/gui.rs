use minifb::{Key, MouseMode, MouseButton, Window, WindowOptions};

const FONT: [[u8; 8]; 128] = {
    let mut font = [[0u8; 8]; 128];
    // Digits
    font[b'0' as usize] = [0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00]; // 0
    font[b'1' as usize] = [0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00]; // 1
    font[b'2' as usize] = [0x3C, 0x66, 0x06, 0x1C, 0x30, 0x60, 0x7E, 0x00]; // 2
    font[b'3' as usize] = [0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00]; // 3
    font[b'4' as usize] = [0x0C, 0x1C, 0x3C, 0x6C, 0x7E, 0x0C, 0x0C, 0x00]; // 4
    font[b'5' as usize] = [0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00]; // 5
    font[b'6' as usize] = [0x3C, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x3C, 0x00]; // 6
    font[b'7' as usize] = [0x7E, 0x06, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00]; // 7
    font[b'8' as usize] = [0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00]; // 8
    font[b'9' as usize] = [0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00]; // 9
    // Uppercase letters
    font[b'A' as usize] = [0x18, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x00]; // A
    font[b'B' as usize] = [0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00]; // B
    font[b'C' as usize] = [0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00]; // C
    font[b'D' as usize] = [0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00]; // D
    font[b'E' as usize] = [0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00]; // E
    font[b'F' as usize] = [0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00]; // F
    font[b'G' as usize] = [0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00]; // G
    font[b'H' as usize] = [0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00]; // H
    font[b'I' as usize] = [0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00]; // I
    font[b'J' as usize] = [0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00]; // J
    font[b'K' as usize] = [0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00]; // K
    font[b'L' as usize] = [0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00]; // L
    font[b'M' as usize] = [0x63, 0x77, 0x7F, 0x7F, 0x6B, 0x63, 0x63, 0x00]; // M
    font[b'N' as usize] = [0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00]; // N
    font[b'O' as usize] = [0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00]; // O
    font[b'P' as usize] = [0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00]; // P
    font[b'Q' as usize] = [0x3C, 0x66, 0x66, 0x66, 0x76, 0x6E, 0x3E, 0x00]; // Q
    font[b'R' as usize] = [0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00]; // R
    font[b'S' as usize] = [0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00]; // S
    font[b'T' as usize] = [0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00]; // T
    font[b'U' as usize] = [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00]; // U
    font[b'V' as usize] = [0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00]; // V
    font[b'W' as usize] = [0x63, 0x63, 0x63, 0x6B, 0x6B, 0x3E, 0x3E, 0x00]; // W
    font[b'X' as usize] = [0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00]; // X
    font[b'Y' as usize] = [0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00]; // Y
    font[b'Z' as usize] = [0x7E, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x7E, 0x00]; // Z
    // Lowercase letters
    font[b'a' as usize] = [0x00, 0x3C, 0x06, 0x3E, 0x66, 0x66, 0x3E, 0x00]; // a
    font[b'b' as usize] = [0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x00]; // b
    font[b'c' as usize] = [0x00, 0x3C, 0x66, 0x60, 0x60, 0x66, 0x3C, 0x00]; // c
    font[b'd' as usize] = [0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00]; // d
    font[b'e' as usize] = [0x00, 0x3C, 0x66, 0x7E, 0x60, 0x66, 0x3C, 0x00]; // e
    font[b'f' as usize] = [0x0E, 0x18, 0x18, 0x3E, 0x18, 0x18, 0x18, 0x00]; // f
    font[b'g' as usize] = [0x00, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x7C]; // g
    font[b'h' as usize] = [0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00]; // h
    font[b'i' as usize] = [0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00]; // i
    font[b'j' as usize] = [0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0x6C, 0x6C, 0x38]; // j
    font[b'k' as usize] = [0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00]; // k
    font[b'l' as usize] = [0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00]; // l
    font[b'm' as usize] = [0x00, 0x7E, 0x7E, 0x6B, 0x6B, 0x6B, 0x6B, 0x00]; // m
    font[b'n' as usize] = [0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00]; // n
    font[b'o' as usize] = [0x00, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00]; // o
    font[b'p' as usize] = [0x00, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x60, 0x60]; // p
    font[b'q' as usize] = [0x00, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x06]; // q
    font[b'r' as usize] = [0x00, 0x7E, 0x62, 0x60, 0x60, 0x60, 0x60, 0x00]; // r
    font[b's' as usize] = [0x00, 0x3E, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00]; // s
    font[b't' as usize] = [0x18, 0x18, 0x3E, 0x18, 0x18, 0x18, 0x0E, 0x00]; // t
    font[b'u' as usize] = [0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00]; // u
    font[b'v' as usize] = [0x00, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00]; // v
    font[b'w' as usize] = [0x00, 0x63, 0x63, 0x6B, 0x6B, 0x3E, 0x3E, 0x00]; // w
    font[b'x' as usize] = [0x00, 0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00]; // x
    font[b'y' as usize] = [0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x7C]; // y
    font[b'z' as usize] = [0x00, 0x7E, 0x66, 0x0C, 0x18, 0x32, 0x7E, 0x00]; // z
    // Symbols some might not work
    font[0x2F] = [0x30, 0x18, 0x0C, 0x06, 0x06, 0x0C, 0x18, 0x30]; // /
    font[0x2E] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00]; // .
    font[0x2C] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30]; // ,
    font[0x3A] = [0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00]; // :
    font[0x3B] = [0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30]; // ;
    font[0x21] = [0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00]; // !
    font[0x3F] = [0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00]; // ?
    font[0x40] = [0x3C, 0x42, 0x5A, 0x5A, 0x5E, 0x40, 0x3C, 0x00]; // @
    font[0x23] = [0x66, 0x66, 0x7E, 0x3C, 0x7E, 0x66, 0x66, 0x00]; // #
    font[0x24] = [0x3C, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x3C, 0x00]; // $
    font[0x25] = [0x00, 0x62, 0x66, 0x0C, 0x18, 0x32, 0x26, 0x00]; // %
    font[0x5E] = [0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00]; // ^
    font[0x26] = [0x38, 0x6C, 0x6C, 0x38, 0x76, 0x6E, 0x3B, 0x00]; // &
    font[0x2A] = [0x66, 0x3C, 0xFF, 0x7E, 0x3C, 0x66, 0x00, 0x00]; // *
    font[0x28] = [0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00]; // (
    font[0x29] = [0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00]; // )
    font[0x2D] = [0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00]; // -
    font[0x5F] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF]; // _
    font[0x2B] = [0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00]; // +
    font[0x3D] = [0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00]; // =
    font[0x7B] = [0x1C, 0x30, 0x30, 0x60, 0x30, 0x30, 0x1C, 0x00]; // {
    font[0x7D] = [0x70, 0x18, 0x18, 0x0C, 0x18, 0x18, 0x70, 0x00]; // }
    font[0x5B] = [0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00]; // [
    font[0x5D] = [0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00]; // ]
    font[0x7C] = [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00]; // |
    font[0x5C] = [0x60, 0x30, 0x30, 0x18, 0x30, 0x30, 0x60, 0x00]; // \
    font[0x22] = [0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00]; // "
    font[0x27] = [0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00]; // '
    font[0x3C] = [0x0C, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0C, 0x00]; // <
    font
};

fn draw_text(buffer: &mut [u32], width: usize, x: usize, y: usize, text: &str, color: u32) {
    let _font_height = 8;
    let font_width = 8;

    for (i, c) in text.chars().enumerate() {
        let ascii = c as usize;
        if ascii < 128 {
            let char_bitmap = FONT[ascii];
            for (row, row_data) in char_bitmap.iter().enumerate() {
                for col in 0..8 {
                    if row_data & (1 << (7 - col)) != 0 {
                        let px = x + i * font_width + col;
                        let py = y + row;
                        if px < width && py < buffer.len() / width {
                            buffer[py * width + px] = color;
                        }
                    }
                }
            }
        }
    }
}

pub fn create_gui<'a>(buttons: &'a [(usize, usize, usize, usize, &'a str)])-> Option<&'a str> {
    const WIDTH: usize = 640;
    const HEIGHT: usize = 360;    
    // Create a window
    let mut window = Window::new(
        "Pick The Game To Capture",
        WIDTH,
        HEIGHT,
        WindowOptions::default(),
    )
    .unwrap_or_else(|e| {
        panic!("Window creation failed: {}", e);
    });

    // Main event loop
    while window.is_open() {
        // Handle keyboard input
        if window.is_key_down(Key::Escape) {
            break;
        }

        // Get mouse position and button state
        let mouse_pos = window.get_mouse_pos(MouseMode::Clamp).unwrap();
        let mouse_down = window.get_mouse_down(MouseButton::Left);

        // Draw buttons
        let mut buffer: Vec<u32> = vec![0; WIDTH * HEIGHT];
        for &(x, y, width, height, text) in buttons {
            let inside_button =
                mouse_pos.0 >= x as f32
                && mouse_pos.0 < (x + width) as f32
                && mouse_pos.1 >= y as f32
                && mouse_pos.1 < (y + height) as f32;

            for dy in 0..height {
                for dx in 0..width {
                    let color = if dx == 0 || dx == width - 1 || dy == 0 || dy == height - 1 {
                        // Border color
                        0x000000
                    } else if inside_button {
                        // Button color when mouse is over
                        0xFF0000
                    } else {
                        // Button color otherwise
                        0xCCCCCC
                    };
                    buffer[(y + dy) * WIDTH + (x + dx)] = color;
                }
            }            
            if inside_button && mouse_down {
                if text.to_lowercase() == "fgo"{
                    println!("{} button was pressed", text);
                    return Some(text);
                }
                else if text.to_lowercase() =="arknights"{  
                    println!("{} button was pressed", text);                 
                    return Some(text);
                }
                else if text.to_lowercase() == "overwatch" {
                    println!("{} button was pressed", text);
                    return Some(text);
                }                               
            }
            // Draw text
            let text_color = 0x000000;
            let text_x = x + 10; // Adjust the text position as needed
            let text_y = y + (height / 2) - 4; // Center the text vertically
            draw_text(&mut buffer, WIDTH, text_x, text_y, text, text_color);
        }
        
        // Update the window
        window.update_with_buffer(&buffer, WIDTH, HEIGHT).unwrap();        
    }  
    None         
}